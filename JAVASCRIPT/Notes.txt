# JavaScript:-
   -It is a scripting and programming language which is used to add life scripting or dynamic response on a webpage.
   -Netscape Communication hired to develop a scripting language for their browser Netscape navigator.
   -Eich created javascript in just 10 days.
   -The language was first called MOCHA then changed to LifeScript and finally JavaScript,not because it is related to java but as a marketing decision to capitalised on java popularity.
   -It is used for building logic of webpage.
   -It is high level programming language used in both client side as well as server side.
   -Currently we are using JS version 6. That is es 6(echma script 6) which is also called as vanilla JS.
   -Node Js is the run time environment of the JS.

 # Scripting Language:-
   -It is a type of programming language used to automate task that executes line by line.For example JS,Python,PHP,etc.

 # Variable Keywords in JS:-
   -They are used to declare  a Variable and to initialise a value to a variable.
   -There are 3 types of variable Keywords:- var let and const.

   * var:-
     -If a variable is declared using var keyword then we can redeclare and re initialize the same variable.
    
   * let:-
     -If a variable is declared using var keyword then we cannot redeclare and re initialize the same variable.

   *const:-
     -It stands for constant.
     -If a variable is declared using const the neither we can redeclare  nor re-initialize same variable. 

     # Datatypes in JS:- 
-Datatypes are used to define which type of value we're storing on a variable.
- By using 'typeof' operator we can check the datatype of a varibale.
-There are two types of datatypes in JavaScript:-
    1.Primitive type
    2.Non-primitive type
Note:- JavaScript is a dynamic typed language that means, datatype of a variable is assigned based on the value passed by the user during runtime.

1. Primitive-type:-
## Number type:- Represents all the possible types of numeric values; like - positive, negative, fraction, whole number, etc..

## String type:- Anything enclosed within single(' ') or double(" ") quote is known as string in JS.
-Basically String is a sequence of character used to represent text.
-We can access each character by using index numbers. string[0], string[1].... .

## boolean type:- It has only two types of values, i.e true and false.
-In JavaScript value of true is 1 and value of false is 0.

## null type:- Null means nothing, which is inherited from Object type. It stores nothing.

## undefined type:-When a variable is declared but not assigned a value, it is automatically initialized with undefined.

## Symbol type:– Used for creating unique values (Symbol("unique"))
-To create a Symbol type variable we need Symbol() operator.

## BigInt type:– Handles very large numbers (BigInt())
-To create a BigInt type varibale we need BigInt() operator.

2. Non-primitive type or Reference Datatype
-Reference datatypes are the type of datatype which can hold multiple element in a single variable.
-Reference datatypes are -> array, object, function
## Array :-Array is a collection of heterogenious(different datatypes) type of data.
-Array indexing start from "0", and to access any value we can use the index position, and arrays are dynamic in size.
-Arrays are used to store multiple values inside a single variable.
ex. let arr = ["hari", "sita", "ram"] 0 1 2

## Object :-Objects are complex data types used to store collection of key value pairs.
-Objects can contain various datatypes, including primitive and non-primitive.
-Keys are unique within an object, and they are used to access the values.
-We can access the value of an object by using dot notation (object.keyName) or bracket notation (object["keyname"]).

ex:-
let obj = { name : "hari", 
    phone : 56789032, 
    address : "bhubaneswar" 
    }
-In the above example left side element are the keys & right side elements are the values of that key.

# Function :-
-functions are the block of code or set of instruction which are used to perform some specific task.
-function reduce our code complexity and help organize logic, improve readability, and make code reusable.
-We need 'function' keyword to create a function in JS.

Syntax :-
function functionName(){ 
    //instruction
 }

function calling ->
functionName();

# Operators in JS:- Operators are symbols used to perform operations on one or more variable and values.

## Arithmetic Operator:-
1. Addition (+): Adds two operands.
2. Subtraction (-): Subtracts right operand from left operand.
3. Multiplication (*): Multiplies two operands.
4. Division (/): Divides left operand by right operand.
5. Modulus (%): Returns the remainder of the division of left operand by right operand.
6. Exponent (**): Used to raise a number to a power.

## Assignment Operator:- 
1. Simple Assignment (=): Assigns a value to a variable.
2. Addition Assignment (+=): Adds the right operand to the left operand and assigns the result to left operand.
3. Subtraction Assignment (-=): Subtracts the right operand from the left operand and assigns the result to left operand.
4. Multiplication Assignment (*=): Multiplies the left operand by the right operand and assigns the result to left operand.
5. Division Assignment (/=): Divides the left operand by the right operand and assigns the result to left operand.
6. Remainder Assignment (%=): Assigns the remainder of division between left and right operands to left operand.
7. Exponentiation Assignment (**=): Raises the left operand to the power of the right operand and assigns the result to left operand.

## Comparision Operator:- 
1. Equal to (==): Compares if two operands are equal.
2. Not equal to (!=): Compares if two operands are not equal.
3. Strict equal to (===): Compares if two operands are equal and of the same data type.
4. Strict not equal to (!==): Compares if two operands are not equal and of the same data type.
5. Greater than (>): Checks if left operand is greater than right operand.
6. Less than (<): Checks if left operand is greater than or equal to right operand.
7. Greater than equal to (>=): Checks if left operand is greater than or equal to right operand.
8. Less than equal to (<=): Checks if left operand is less than or equal to right operand.

## Logical Opercators :-
1. Logical AND (&&): Returns true if both operands are true.
2. Logical OR (||): Returns true if either of the operands is true.
3. Logical NOT (!): Returns the opposite of the operand's boolean value.

## Unary Operator:-
Unary operator is an operator that works on a single operand.
1. Increment (++):- Increases the value of a variable by 1.
a) Pre-Increment :- increments first, then returns the value.
b) Post-Increment :- returns the current value, then increments.
2.Decrement (--):- Decreases the value of a variable by 1.
a) Pre-Decrement :- decrements first, then returns the value.
b) Post-Decrement:- returns the current value, then decrements.


#Loops in JavaScript:-
When we have to run the same sets of instruction over and over each time with different or with same value we use loops.
Loops are used to repeat some task.
 1.For Loop:-
  -It provides concise way of writting the loop structure containing initialization condition and updation in one line.
  -A for loop repeats until a specified condition evaluates to false.


#Conditional Statements:
It is used to implement some condition in the code.
With these statements we can make decision in our code thats why it is also known as decision making statement.
There are four types of conditional statement available in javascript.
  1.If statement:-
    It executes the block if the condition is true.
    When we have one statement which we want to execute based on a condition then we use simple if or if condition.
    If the condition is false nothing happens.
    for(initializatio; condition; itteration/updation){
    //instruction
    }

  2.While Loop:-
    -When we know starting point but we dont know the ending point in that case we use while loop.
    -It executes its block as long as the condition is true.
     initialization
   while(condition){
     //instructions
     updation
    }

  3.Do While:-
    -It is similar to while loop but the only difference is it executes the instruction first then it checks the condition.Thats why even the condition is false still the block of code will execute atleast once.
      initialization
    do{
      //instruction
      //updation 
    }while(condition) 

  4.For of:-
      -It is a looping statement that itterates through the vlaue of an index based collection.For example string and array.
      -It directly provides each value of the collection which can be processed within the loop.
      for(iterator of collection){
        //instruction
      }

  5.For in:-
    It is looping statement that itterates through the key of an object.
    for(iterator in object){
        //instruction
      }    
     